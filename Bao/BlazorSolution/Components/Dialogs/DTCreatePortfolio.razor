@using System.Security
@using BlazorProject.Data
@using MongoDB.Bson
@using MudExtensions
@using _Imports = BlazorProject.Components._Imports

<MudDialog>
    <TitleContent>
        <MudText
            Typo="Typo.h5"
            Align="Align.Center"
            >
            Create Portfolio
        </MudText>
    </TitleContent>

    <DialogContent>
        <MudTextField
            @bind-Value="Name"
            Label="Enter name"
            Required
        />
        <MudSelectExtended
            ItemCollection="AllInvestors"
            ToStringFunc="@(investor => investor?.Name)"
            Label="Select investor"
            @bind-Value="SelectedInvestor"
            Required
        />

        @foreach (var selectedSecurity in SelectedSecurityDistribution) {
            var otherSelectedSecurities = SelectedSecurityDistribution
                .Where(ss => ss.Security != null)
                .Select(ss => ss.Security);

            var availableSecurities = AllSecurities.Except(otherSelectedSecurities).ToList();

            <MudStack Row="true">
                <MudSelectExtended
                    ItemCollection="availableSecurities"
                    ToStringFunc="@(security => security?.Name)"
                    Label="Select security"
                    Style="width: 300px"
                    Required
                    @bind-Value="selectedSecurity.Security"
                />
                <div style="width: 80px">
                    <MudNumericField
                        HelperText="% of portfolio"
                        Min="0"
                        Max="100"
                        Step="10"
                        Required
                        @bind-Value="selectedSecurity.Percentage"
                    />
                </div>
            </MudStack>
        }

        <MudIconButton
            Icon="@Icons.Material.Filled.Add"
            Size="Size.Small"
            OnClick="AddSecurity"
        />
    </DialogContent>

    <DialogActions>
        <MudText>
            Total percentage:
            <span style="color:@(TotalPercentage == 100 ? "green" : "red")">@TotalPercentage%</span>
        </MudText>
        <MudButton OnClick="@(() => MudDialog.Cancel())">Cancel</MudButton>
        <MudButton
            Color="Color.Primary"
            Disabled="TotalPercentage != 100"
            OnClick="@(() => MudDialog.Close(DialogResult.Ok(new Portfolio { Name = Name, InvestorId = SelectedInvestor!.Id, SecurityDistribution = SelectedSecurityDistribution.ToDictionary(x => x.Security!.Id, x => x.Percentage) })))"
        >
            OK
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public List<Investor> AllInvestors { get; set; } = [];

    [Parameter] public List<Security> AllSecurities { get; set; } = [];

    string Name { get; set; } = string.Empty;

    private Investor? SelectedInvestor { get; set; }

    private record SelectedSecurity(Security? Security, double Percentage) {
        public Security? Security { get; set; } = Security;
        public double Percentage { get; set; } = Percentage;
    }

    List<SelectedSecurity> SelectedSecurityDistribution { get; set; } = [];

    private void AddSecurity() {
        var remainingPercentage = 100 - SelectedSecurityDistribution.Sum(x => x.Percentage);

        SelectedSecurityDistribution.Add(new(null, remainingPercentage));
    }

    protected override void OnInitialized() {
        AddSecurity();
        base.OnInitialized();
    }

    private double TotalPercentage => SelectedSecurityDistribution.Sum(x => x.Percentage);
}
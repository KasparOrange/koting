@page "/"
@using BlazorProject.Components.Dialogs
@using BlazorProject.Data
@using BlazorProject.Services
@inject IDialogService DialogService
@inject ILogger<Portfolios> Logger
@inject ISnackbar Snackbar
@inject InvestorRepository InvestorRepository
@inject SecurityRepository SecurityRepository
@inject PortfolioRepository PortfolioRepository

@* NOTE: Investors *@
<MudStack Row="true">
    <h2>Investors</h2>
    <MudIconButton
        Icon="@Icons.Material.Filled.Add"
        Size="Size.Small"
        OnClick="OpenDTCreateInvestorAsync"
    />
</MudStack>

<MudDataGrid Items="@(AllInvestors)">
    <Columns>
        <PropertyColumn Property="x => x.Name"/>
        <PropertyColumn Property="x => x.CreatedAt"/>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                               Color="Color.Error" 
                               OnClick="@(() => DeleteInvestor(context.Item!))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@* NOTE: Portfolios *@
<MudStack Row="true" Class="mt-7">
    <h2>Portfolios</h2>
    <MudIconButton
        Icon="@Icons.Material.Filled.Add"
        Size="Size.Small"
        @onclick="OpenDTCreatePortfolio"/>
</MudStack>

<MudDataGrid Items="@(AllPortfolios)">
    <Columns>
        <PropertyColumn
            Property="x => x.Name"
        />
        <PropertyColumn
            Property="x => AllInvestors.FirstOrDefault( i => i.Id == x.InvestorId)!.Name"
            Title="Investor"
        />
        <TemplateColumn Title="Securities Distribution">
            <CellTemplate Context="portfolio">
                <MudChart
                    ChartType="ChartType.Pie"
                    InputData="@portfolio.Item.SecurityDistribution.Values.ToArray()"
                    InputLabels="@portfolio.Item.SecurityDistribution.Keys.Select(key => AllSecurities.FirstOrDefault(s => s.Id == key)!.Name).ToArray()"
                    Width="200"
                />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn
            Property="x => x.CreatedAt"
        />
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                               Color="Color.Error" 
                               OnClick="@(() => DeletePortfolio(context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@* NOTE: Securities *@
<MudStack Row="true" Class="mt-7">
    <h2>Securities</h2>
    <MudIconButton
        Icon="@Icons.Material.Filled.Add"
        Size="Size.Small"
        @onclick="OpenDTCreateSecurity"
    />
</MudStack>

<MudDataGrid Items="@(AllSecurities)">
    <Columns>
        <PropertyColumn Property="x => x.Name"/>
        <PropertyColumn Property="x => x.ISIN"/>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                               Color="Color.Error" 
                               OnClick="@(() => DeleteSecurity(context.Item))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {

    protected override async Task OnInitializedAsync() {
        AllInvestors = await InvestorRepository.GetAllInvestorsAsync();
        AllSecurities = await SecurityRepository.GetAllSecuritiesAsync();
        AllPortfolios = await PortfolioRepository.GetAllPortfoliosAsync();
    }

    private List<Investor> AllInvestors = [];
    private List<Portfolio> AllPortfolios = [];
    private List<Security> AllSecurities = [];

    private async Task OpenDTCreateInvestorAsync() {
        var dialog = await DialogService.ShowAsync<DTCreateInvestor>();

        var result = await dialog.Result;

        if (result is null || result.Canceled || result.Data is not string name) return;

        var newInvestor = await InvestorRepository.CreateInvestorAsync(new() { Name = name });

        Logger.LogInformation("Created investor '{name}'", result.Data);
        
        AllInvestors.Add(newInvestor);
        
        Snackbar.Add($"Created investor '{newInvestor.Name}'", Severity.Success);
    }

    private async Task OpenDTCreatePortfolio() {
        var dialog = await DialogService.ShowAsync<DTCreatePortfolio>(null,
            new DialogParameters<DTCreatePortfolio> {
                { x => x.AllInvestors, AllInvestors },
                { x => x.AllSecurities, AllSecurities }
            });
        var result = await dialog.Result;


        if (result is null || result.Canceled || result.Data is not Portfolio returnedPortfolio) return;

        Logger.LogInformation("Dialog result: {result}", returnedPortfolio);

        var newPortfolio = await PortfolioRepository.CreatePortfolioAsync(returnedPortfolio);

        Logger.LogInformation("Created security '{name}'", result.Data);
        
        AllPortfolios.Add(newPortfolio);
        
        Snackbar.Add($"Created portfolio '{newPortfolio.Name}'", Severity.Success);
    }

    private async Task OpenDTCreateSecurity() {
        var dialog = await DialogService.ShowAsync<DTCreateSecurity>();

        var result = await dialog.Result;

        if (result is null || result.Canceled || result.Data is not DTCreateSecurity.ReturnType returnValue) return;

        var newSecurity = await SecurityRepository.CreateSecurityAsync(new() {
            Name = returnValue.Name,
            ISIN = returnValue.ISIN
        });

        Logger.LogInformation("Created security '{name}'", result.Data);
        
        AllSecurities.Add(newSecurity);
        
        Snackbar.Add($"Created security '{newSecurity.Name}'", Severity.Success);
    }

    private async Task DeleteInvestor(Investor contextItem) {
        var result = await DialogService.ShowMessageBox(
            $"Delete investor {contextItem.Name}?", 
            "This will also delete their portfolios.",
            cancelText: "Cancel");
    
        if (result != true) return;
        
        AllInvestors.Remove(contextItem);
        
        AllPortfolios.RemoveAll(p => p.InvestorId == contextItem.Id);
        
        var removedInvestor = await InvestorRepository.DeleteInvestorAsync(contextItem);
        
        Snackbar.Add($"Deleted investor '{removedInvestor.Name}' and their portfolios", Severity.Success);
    }
    
    private async Task DeletePortfolio(Portfolio contextItem) {
        var result = await DialogService.ShowMessageBox(
            $"Delete portfolio {contextItem.Name}?", 
            null,
            cancelText: "Cancel");
    
        if (result != true) return;
        
        AllPortfolios.Remove(contextItem);
        
        var removedPortfolio = await PortfolioRepository.DeletePortfolioAsync(contextItem);
        
        Snackbar.Add($"Deleted portfolio '{removedPortfolio.Name}'", Severity.Success);
    }

    private async Task DeleteSecurity(Security contextItem) {
        var result = await DialogService.ShowMessageBox(
            $"Delete security {contextItem.Name}?", 
            null,
            cancelText: "Cancel");
    
        if (result != true) return;
        
        AllSecurities.Remove(contextItem);
        
        var removedSecurity = await SecurityRepository.DeleteSecurityAsync(contextItem);
        
        Snackbar.Add($"Deleted security '{removedSecurity.Name}'", Severity.Success);
    }
}
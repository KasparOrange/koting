@attribute [Route(PageRoutes.Portfolios)]
@using System.Globalization
@using BlazorProject.Components.Dialogs
@using BlazorProject.Data
@inject IDialogService DialogService
@inject ILogger<Portfolios> Logger
@inject ISnackbar Snackbar
@inject InvestorRepository InvestorRepository
@inject AssetRepository AssetRepository
@inject PortfolioRepository PortfolioRepository

@* NOTE: Investors *@
<MudStack Row="true">
    <h2>Investors</h2>
    <MudIconButton
        Icon="@Icons.Material.Filled.Add"
        Size="Size.Small"
        OnClick="OpenDTCreateInvestorAsync"
    />
</MudStack>

<MudDataGrid
    Items="@(AllInvestors)"
    Hover
    Striped
    ColumnResizeMode="ResizeMode.Column"
    HeaderClass="bao-header"
>
    <Columns>
        <PropertyColumn Property="x => x.Name"/>
        <PropertyColumn Property="x => x.CreatedAt"/>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="@(() => DeleteInvestor(context.Item!))"
                />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@* NOTE: Portfolios *@
<MudStack
    Row="true"
    Class="mt-7"
>
    <h2>Portfolios</h2>
    <MudIconButton
        Icon="@Icons.Material.Filled.Add"
        Size="Size.Small"
        @onclick="OpenDTCreatePortfolio"
    />
</MudStack>

<MudDataGrid
    Items="@(AllPortfolios)"
    Hover
    Striped
    ColumnResizeMode="ResizeMode.Column"
    HeaderClass="bao-header"
>
    <Columns>
        <PropertyColumn
            Property="x => x.Name"
        />
        <PropertyColumn
            Property="x => AllInvestors.FirstOrDefault( i => i.Id == x.InvestorId)!.Name"
            Title="Investor"
        />
        <TemplateColumn Title="Assets Distribution">
            <CellTemplate Context="portfolio">
                <MudChart
                    ChartType="ChartType.Pie"
                    InputData="@portfolio.Item.AssetDistribution.Values.ToArray()"
                    InputLabels="@portfolio.Item.AssetDistribution.Keys.Select(key => AllAssets.FirstOrDefault(s => s.Id == key)!.Name).ToArray()"
                    Width="200"
                    ChartOptions="@(new() { ShowLegend = false })"
                />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn
            Property="x => x.CreatedAt"
        />
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="@(() => DeletePortfolio(context.Item))"
                />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@* NOTE: Assets *@
<MudStack
    Row="true"
    Class="mt-7"
>
    <h2>Assets</h2>
    <MudIconButton
        Icon="@Icons.Material.Filled.Add"
        Size="Size.Small"
        @onclick="OpenDTCreateAsset"
    />
</MudStack>

<MudDataGrid
    Items="@(AllAssets)"
    Hover
    Striped
    ColumnResizeMode="ResizeMode.Column"
    HeaderClass="bao-header"
>
    @* Style="background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%)" *@
    <Columns>
        <PropertyColumn Property="x => x.Name"/>
        <PropertyColumn Property="x => x.Type"/>
        <PropertyColumn Property="x => x.ISIN"/>
        <TemplateColumn>
            <HeaderTemplate>
                <MudStack Row="true">
                    <span>Price</span>
                    <MudIconButton
                        Icon="@Icons.Material.Filled.Refresh"
                        Size="Size.Small" OnClick="RefreshPrices"/>
                </MudStack>
            </HeaderTemplate>
            <CellTemplate>
                @context.Item!.Price.ToString("C2", CultureInfo.GetCultureInfo("en-US"))
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Delete"
                    Color="Color.Error"
                    OnClick="@(() => DeleteAsset(context.Item))"
                />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {

    protected override async Task OnInitializedAsync() {
        AllInvestors = await InvestorRepository.GetAllInvestorsAsync();
        AllAssets = await AssetRepository.GetAllAssetsAsync();
        AllPortfolios = await PortfolioRepository.GetAllPortfoliosAsync();
    }

    private List<Investor> AllInvestors = [];
    private List<Portfolio> AllPortfolios = [];
    private List<Asset> AllAssets = [];

    private async Task OpenDTCreateInvestorAsync() {
        var dialog = await DialogService.ShowAsync<DTCreateInvestor>();

        var result = await dialog.Result;

        if (result is null || result.Canceled || result.Data is not string name) return;

        var newInvestor = await InvestorRepository.CreateInvestorAsync(new() { Name = name });

        Logger.LogInformation("Created investor '{name}'", result.Data);

        AllInvestors.Add(newInvestor);

        Snackbar.Add($"Created investor '{newInvestor.Name}'", Severity.Success); }

    private async Task OpenDTCreatePortfolio() {
        var dialog = await DialogService.ShowAsync<DTCreatePortfolio>(null,
            new DialogParameters<DTCreatePortfolio> {
                { x => x.AllInvestors, AllInvestors },
                { x => x.AllAssets, AllAssets }
            });
        var result = await dialog.Result;


        if (result is null || result.Canceled || result.Data is not Portfolio returnedPortfolio) return;

        Logger.LogInformation("Dialog result: {result}", returnedPortfolio);

        var newPortfolio = await PortfolioRepository.CreatePortfolioAsync(returnedPortfolio);

        Logger.LogInformation("Created Asset '{name}'", result.Data);

        AllPortfolios.Add(newPortfolio);

        Snackbar.Add($"Created portfolio '{newPortfolio.Name}'", Severity.Success);
    }

    private async Task OpenDTCreateAsset() {
        var dialog = await DialogService.ShowAsync<DTCreateAsset>();

        var result = await dialog.Result;

        if (result is null || result.Canceled || result.Data is not DTCreateAsset.ReturnType returnValue) return;

        var newAsset = await AssetRepository.CreateAssetAsync(new() {
            Name = returnValue.Name,
            ISIN = returnValue.ISIN,
            Type = returnValue.Type,
        });

        Logger.LogInformation("Created asset '{name}'", result.Data);

        AllAssets.Add(newAsset);

        Snackbar.Add($"Created asset '{newAsset.Name}'", Severity.Success);
    }

    private async Task DeleteInvestor(Investor contextItem) {
        var result = await DialogService.ShowMessageBox(
            $"Delete investor {contextItem.Name}?",
            "This will also delete their portfolios.",
            cancelText: "Cancel");

        if (result != true) return;

        AllInvestors.Remove(contextItem);

        AllPortfolios.RemoveAll(p => p.InvestorId == contextItem.Id);

        var removedInvestor = await InvestorRepository.DeleteInvestorAsync(contextItem);

        Snackbar.Add($"Deleted investor '{removedInvestor.Name}' and their portfolios", Severity.Success);
    }

    private async Task DeletePortfolio(Portfolio contextItem) {
        var result = await DialogService.ShowMessageBox(
            $"Delete portfolio {contextItem.Name}?",
            null,
            cancelText: "Cancel");

        if (result != true) return;

        AllPortfolios.Remove(contextItem);

        var removedPortfolio = await PortfolioRepository.DeletePortfolioAsync(contextItem);

        Snackbar.Add($"Deleted portfolio '{removedPortfolio.Name}'", Severity.Success);
    }

    private async Task DeleteAsset(Asset contextItem) {
        var result = await DialogService.ShowMessageBox(
            $"Delete Asset {contextItem.Name}?",
            null,
            cancelText: "Cancel");

        if (result != true) return;

        AllAssets.Remove(contextItem);

        var removedAsset = await AssetRepository.DeleteAssetAsync(contextItem);

        Snackbar.Add($"Deleted Asset '{removedAsset.Name}'", Severity.Success);
    }

    public record AssetDto(string Name, string ISIN, double Price);

    private async Task RefreshPrices() {
        if (AllAssets.Count == 0) return;

        Logger.LogInformation("Refreshing prices for {count} Assets", AllAssets.Count);

        using var client = new HttpClient();

        var tasks = AllAssets.Select(async Asset => {
            // using a DTO because the ID wasn't recognised properly by the API
            var dto = new AssetDto(Asset.Name, Asset.ISIN, Asset.Price);

            var response = await client.PostAsJsonAsync("https://localhost:7209/portfolio/refreshprice", dto);

            var updatedDto = await response.Content.ReadFromJsonAsync<AssetDto>();

            Asset.Price = updatedDto!.Price;

            return Asset;
        });

        List<Asset> returnedAssets = (await Task.WhenAll(tasks)).ToList()!;

        await AssetRepository.UpdateAllAssetsAsync(returnedAssets);

        AllAssets = await AssetRepository.GetAllAssetsAsync();
    }
}